plugins {
    id 'com.github.johnrengelman.shadow' version '8.1.1'
    id 'java'
    id 'application'
    id 'maven-publish'

}


sourceCompatibility = 1.8

version = '0.20'

repositories {
    mavenCentral()

    flatDir {
        dirs 'lib'
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/']
        }
        resources {
            srcDirs = ['resources/']
        }
    }
    test {
        java {
            srcDirs = ['test/src']
        }
        resources {
            srcDirs = ['test-resources/', 'benchmarks/']
        }
    }
}

// maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId 'dk.au.cs.casa'
            artifactId 'tajs'
            from components.java
        }
    }
}

compileJava {
    options.encoding = 'UTF-8'
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
}

dependencies {

    // Main
    implementation group: 'com.google.guava', name: 'guava', version: '22.0' // put this before anything else to ensure this is the version used
    implementation group: 'args4j', name: 'args4j', version: '2.33'
    implementation group: 'com.google.javascript', name: 'closure-compiler', version: 'v20170806'
    implementation group: 'commons-io', name: 'commons-io', version: '2.5'
    implementation group: 'net.htmlparser.jericho', name: 'jericho-html', version: '3.3'
    implementation group: 'log4j', name: 'log4j', version: '1.2.17'
    implementation group: 'jgrapht', name: 'jgrapht', version: '0.7.3'
    implementation group: 'org.eclipse.jetty', name: 'jetty-webapp', version: '9.4.5.v20170502'

    // To use copy-pasted jalangilogger jar
    //compile group: "jer", name: "jer"
    // To use multi-project build with the submodule
    implementation project(":jalangilogger");

    // To use copy-pasted inspector.jar
    //compile group: "inspector", name: "inspector"
    // To use multi-project build with the submodule
    implementation project(":inspector");

    // To use copy-pasted ts-spec-reader.jar
    //compile group: "ts-spec-reader", name: "ts-spec-reader"
    // To use multi-project build with the submodule
    implementation project(":ts-spec-reader");

    // Testing
    testImplementation group: 'junit', name: 'junit', version: '4.12'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'

}

mainClassName = "dk.brics.tajs.Main"
applicationDefaultJvmArgs = ["-Duser.country=US", "-Duser.language=en"]

task testFast(type: Test) {
    include '**/RunFast.class'
}

task testMedium(type: Test) {
    include '**/RunFast.class'
    include '**/RunMedium.class'
}

task makeStatsStandard(type: JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    main = 'dk.brics.tajs.test.stats.StatsStandard'
    systemProperty "statsquiet", System.getProperty("statsquiet", "false")
}

task makeStatsExtra(type: JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    main = 'dk.brics.tajs.test.stats.StatsExtra'
    systemProperty "statsquiet", System.getProperty("statsquiet", "false")
}

task makeStatsLibs(type: JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    main = 'dk.brics.tajs.test.stats.StatsLibs'
    systemProperty "statsquiet", System.getProperty("statsquiet", "false")
}

task makeStatsJQuery(type: JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    main = 'dk.brics.tajs.test.stats.StatsJQuery'
    systemProperty "statsquiet", System.getProperty("statsquiet", "false")
}

task makeStatsValuePartitioningUnderscore(type: JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    main = 'dk.brics.tajs.test.stats.StatsValuePartitioning$Underscore'
    systemProperty "statsquiet", System.getProperty("statsquiet", "false")
}

task makeStatsValuePartitioningLodash3(type: JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    main = 'dk.brics.tajs.test.stats.StatsValuePartitioning$Lodash3'
    systemProperty "statsquiet", System.getProperty("statsquiet", "false")
}

task makeStatsValuePartitioningLodash4(type: JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    main = 'dk.brics.tajs.test.stats.StatsValuePartitioning$Lodash4'
    systemProperty "statsquiet", System.getProperty("statsquiet", "false")
}

task makeStatsValuePartitioningPrototype(type: JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    main = 'dk.brics.tajs.test.stats.StatsValuePartitioning$Prototype'
    systemProperty "statsquiet", System.getProperty("statsquiet", "false")
}

task makeStatsValuePartitioningScriptaculous(type: JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    main = 'dk.brics.tajs.test.stats.StatsValuePartitioning$Scriptaculous'
    systemProperty "statsquiet", System.getProperty("statsquiet", "false")
}

task makeStatsValuePartitioningJQuery(type: JavaExec) {
    classpath sourceSets.test.runtimeClasspath
    main = 'dk.brics.tajs.test.stats.StatsValuePartitioning$JQuery'
    systemProperty "statsquiet", System.getProperty("statsquiet", "false")
}

test {
    testLogging {
        exceptionFormat = 'full'
    }
    afterSuite { desc, result ->
        if (!desc.parent) // will match the outermost suite
            println("${result.resultType} " +
                    "(${result.testCount} tests, " +
                    "${result.successfulTestCount} successes, " +
                    "${result.failedTestCount} failures, " +
                    "${result.skippedTestCount} skipped)")
    }
}